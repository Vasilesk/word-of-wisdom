// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	logger "github.com/vasilesk/word-of-wisdom/pkg/logger"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Errorf provides a mock function with given fields: format, v
func (_m *Logger) Errorf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Logger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type Logger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Errorf(format interface{}, v ...interface{}) *Logger_Errorf_Call {
	return &Logger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Errorf_Call) Run(run func(format string, v ...interface{})) *Logger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Errorf_Call) Return() *Logger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Errorf_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Errorf_Call {
	_c.Call.Return(run)
	return _c
}

// Fatalf provides a mock function with given fields: format, v
func (_m *Logger) Fatalf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Logger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type Logger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Fatalf(format interface{}, v ...interface{}) *Logger_Fatalf_Call {
	return &Logger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Fatalf_Call) Run(run func(format string, v ...interface{})) *Logger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Fatalf_Call) Return() *Logger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Fatalf_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Fatalf_Call {
	_c.Call.Return(run)
	return _c
}

// Infof provides a mock function with given fields: format, v
func (_m *Logger) Infof(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Logger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type Logger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Infof(format interface{}, v ...interface{}) *Logger_Infof_Call {
	return &Logger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Infof_Call) Run(run func(format string, v ...interface{})) *Logger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Infof_Call) Return() *Logger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Infof_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Infof_Call {
	_c.Call.Return(run)
	return _c
}

// Warnf provides a mock function with given fields: format, v
func (_m *Logger) Warnf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Logger_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type Logger_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Warnf(format interface{}, v ...interface{}) *Logger_Warnf_Call {
	return &Logger_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Warnf_Call) Run(run func(format string, v ...interface{})) *Logger_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warnf_Call) Return() *Logger_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warnf_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Warnf_Call {
	_c.Call.Return(run)
	return _c
}

// WithData provides a mock function with given fields: data
func (_m *Logger) WithData(data map[string]interface{}) logger.Logger {
	ret := _m.Called(data)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(map[string]interface{}) logger.Logger); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_WithData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithData'
type Logger_WithData_Call struct {
	*mock.Call
}

// WithData is a helper method to define mock.On call
//   - data map[string]interface{}
func (_e *Logger_Expecter) WithData(data interface{}) *Logger_WithData_Call {
	return &Logger_WithData_Call{Call: _e.mock.On("WithData", data)}
}

func (_c *Logger_WithData_Call) Run(run func(data map[string]interface{})) *Logger_WithData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *Logger_WithData_Call) Return(_a0 logger.Logger) *Logger_WithData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithData_Call) RunAndReturn(run func(map[string]interface{}) logger.Logger) *Logger_WithData_Call {
	_c.Call.Return(run)
	return _c
}

// WithError provides a mock function with given fields: err
func (_m *Logger) WithError(err error) logger.Logger {
	ret := _m.Called(err)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(error) logger.Logger); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_WithError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithError'
type Logger_WithError_Call struct {
	*mock.Call
}

// WithError is a helper method to define mock.On call
//   - err error
func (_e *Logger_Expecter) WithError(err interface{}) *Logger_WithError_Call {
	return &Logger_WithError_Call{Call: _e.mock.On("WithError", err)}
}

func (_c *Logger_WithError_Call) Run(run func(err error)) *Logger_WithError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Logger_WithError_Call) Return(_a0 logger.Logger) *Logger_WithError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithError_Call) RunAndReturn(run func(error) logger.Logger) *Logger_WithError_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
