// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	logger "github.com/vasilesk/word-of-wisdom/pkg/logger"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Errorf provides a mock function with given fields: format, v
func (_m *Logger) Errorf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Fatalf provides a mock function with given fields: format, v
func (_m *Logger) Fatalf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: format, v
func (_m *Logger) Infof(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Warnf provides a mock function with given fields: format, v
func (_m *Logger) Warnf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// WithData provides a mock function with given fields: data
func (_m *Logger) WithData(data map[string]interface{}) logger.Logger {
	ret := _m.Called(data)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(map[string]interface{}) logger.Logger); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// WithError provides a mock function with given fields: err
func (_m *Logger) WithError(err error) logger.Logger {
	ret := _m.Called(err)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(error) logger.Logger); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
