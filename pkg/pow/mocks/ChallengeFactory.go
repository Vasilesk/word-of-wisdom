// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pow "github.com/vasilesk/word-of-wisdom/pkg/pow"
)

// ChallengeFactory is an autogenerated mock type for the ChallengeFactory type
type ChallengeFactory struct {
	mock.Mock
}

// GetNewChallenge provides a mock function with given fields: ctx
func (_m *ChallengeFactory) GetNewChallenge(ctx context.Context) (pow.Challenge, error) {
	ret := _m.Called(ctx)

	var r0 pow.Challenge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pow.Challenge, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pow.Challenge); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pow.Challenge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreChallenge provides a mock function with given fields: _a0, marshaled
func (_m *ChallengeFactory) RestoreChallenge(_a0 context.Context, marshaled string) (pow.Challenge, error) {
	ret := _m.Called(_a0, marshaled)

	var r0 pow.Challenge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pow.Challenge, error)); ok {
		return rf(_a0, marshaled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pow.Challenge); ok {
		r0 = rf(_a0, marshaled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pow.Challenge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, marshaled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChallengeFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewChallengeFactory creates a new instance of ChallengeFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChallengeFactory(t mockConstructorTestingTNewChallengeFactory) *ChallengeFactory {
	mock := &ChallengeFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
