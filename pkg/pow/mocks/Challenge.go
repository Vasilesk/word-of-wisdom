// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pow "github.com/vasilesk/word-of-wisdom/pkg/pow"
)

// Challenge is an autogenerated mock type for the Challenge type
type Challenge struct {
	mock.Mock
}

// Check provides a mock function with given fields: ctx, solution, data
func (_m *Challenge) Check(ctx context.Context, solution pow.Solution, data pow.Data) (bool, error) {
	ret := _m.Called(ctx, solution, data)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pow.Solution, pow.Data) (bool, error)); ok {
		return rf(ctx, solution, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pow.Solution, pow.Data) bool); ok {
		r0 = rf(ctx, solution, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pow.Solution, pow.Data) error); ok {
		r1 = rf(ctx, solution, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Solve provides a mock function with given fields: ctx, data
func (_m *Challenge) Solve(ctx context.Context, data pow.Data) (pow.Solution, error) {
	ret := _m.Called(ctx, data)

	var r0 pow.Solution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pow.Data) (pow.Solution, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pow.Data) pow.Solution); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pow.Solution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pow.Data) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *Challenge) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewChallenge interface {
	mock.TestingT
	Cleanup(func())
}

// NewChallenge creates a new instance of Challenge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChallenge(t mockConstructorTestingTNewChallenge) *Challenge {
	mock := &Challenge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
