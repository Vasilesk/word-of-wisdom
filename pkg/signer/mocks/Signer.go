// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	signer "github.com/vasilesk/word-of-wisdom/pkg/signer"
)

// Signer is an autogenerated mock type for the Signer type
type Signer struct {
	mock.Mock
}

type Signer_Expecter struct {
	mock *mock.Mock
}

func (_m *Signer) EXPECT() *Signer_Expecter {
	return &Signer_Expecter{mock: &_m.Mock}
}

// Restore provides a mock function with given fields: signed
func (_m *Signer) Restore(signed signer.Signed) (signer.Data, error) {
	ret := _m.Called(signed)

	var r0 signer.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(signer.Signed) (signer.Data, error)); ok {
		return rf(signed)
	}
	if rf, ok := ret.Get(0).(func(signer.Signed) signer.Data); ok {
		r0 = rf(signed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(signer.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(signer.Signed) error); ok {
		r1 = rf(signed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signer_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type Signer_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - signed signer.Signed
func (_e *Signer_Expecter) Restore(signed interface{}) *Signer_Restore_Call {
	return &Signer_Restore_Call{Call: _e.mock.On("Restore", signed)}
}

func (_c *Signer_Restore_Call) Run(run func(signed signer.Signed)) *Signer_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(signer.Signed))
	})
	return _c
}

func (_c *Signer_Restore_Call) Return(_a0 signer.Data, _a1 error) *Signer_Restore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Signer_Restore_Call) RunAndReturn(run func(signer.Signed) (signer.Data, error)) *Signer_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: data
func (_m *Signer) Sign(data signer.Data) (signer.Signed, error) {
	ret := _m.Called(data)

	var r0 signer.Signed
	var r1 error
	if rf, ok := ret.Get(0).(func(signer.Data) (signer.Signed, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(signer.Data) signer.Signed); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(signer.Signed)
		}
	}

	if rf, ok := ret.Get(1).(func(signer.Data) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signer_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type Signer_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - data signer.Data
func (_e *Signer_Expecter) Sign(data interface{}) *Signer_Sign_Call {
	return &Signer_Sign_Call{Call: _e.mock.On("Sign", data)}
}

func (_c *Signer_Sign_Call) Run(run func(data signer.Data)) *Signer_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(signer.Data))
	})
	return _c
}

func (_c *Signer_Sign_Call) Return(_a0 signer.Signed, _a1 error) *Signer_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Signer_Sign_Call) RunAndReturn(run func(signer.Data) (signer.Signed, error)) *Signer_Sign_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSigner interface {
	mock.TestingT
	Cleanup(func())
}

// NewSigner creates a new instance of Signer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSigner(t mockConstructorTestingTNewSigner) *Signer {
	mock := &Signer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
